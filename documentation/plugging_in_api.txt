How to plug in an API for a new screen:

1)Load data in controller

  var include = ['LoanDocuments'];

  //define your resources
  var resources = {
    getAgreementHistory: $resource(baseUrl + '/api/AgreementHistoryAction/GetByProjectId', {}, {
      getByProjectId: { method: 'GET', params: { projectId: $scope.projectId, include: include.join()}, isArray: true}
    }) 
  };



  //load the data
  loadData();
  function loadData(){
    $scope.loading=true;
    //define what requests you want to run
    var requests = [

      resources.getAgreementHistory.getByProjectId(function(results){
        
        //set results to scope variable
        $scope.agreementHistory = results;
        log.dir($scope.agreementHistory, 'Agreement history');
      }).$promise

    ];

    //When all requests are run
    $q.all(requests).then(function(data){
      $scope.loading=false;
      $scope.unsavedChanges = false;

    });
  }


  **** make sure your controller has the right dependencies:  '$resource', '$q', 'baseUrl'



2) Plug in ng-models in html

  >> make sure date inputs use date-input directive (type="text" date-input placeholder="mm/dd/yyyy" ) or date-input-two
  >> make sure money inputs use ui-maskmoney (type="text" ui-maskmoney data-prefix="" data-decimal="." data-thousands="," data-allow-zero="true")
  >> mark selects as green so you know to add lookups
  >> mark data model errors in red to tell back end developer

3) Get lookups for drop downs


//enumerate lookups needed
  var lookups = [
    'agreement_history_action_type',
    'agreement_history_assistance_type'
  ];

  //go get 'em
  lookupAPI.doConcurrentLookups(lookups).then(function(data){
    $scope.lookups = data;
    log.dir($scope.lookups, 'lookups');
  })



4) Plug in ng-options with lookups into dropdowns

ng-options="option.componentLookUpId as option.componentName for option in lookups['cwsrf_needs_category']"





**** DONE GETTING DATA FROM API. TEST TO MAKE SURE DATA IS GOTTEN ****




5) Add save functionality
  <button class="btn btn-primary save-btn"  ng-click="save()"  ng-disabled="loading || !unsavedChanges">Save Project</button>


////////////////////////
// SAVE FUNCTIONALITY //
////////////////////////

  $scope.save = function(reload){
    log.group("Saving Agreement History");
    log.dir($scope.agreementHistory, "Agreement history actions to be saved");
    

    var saveRequests = [
      resources.saveAgreementHistory.save($scope.agreementHistory, function(results){
        console.log("Agreement History was successfully saved!")
      }, function(error){
        console.error("Agreement History save failed.");
        console.error(error);
      }).$promise,
    ];

    $q.all(saveRequests).then(function(data){
      console.log("All save requests complete");
      log.groupEnd("Saving Agreement History");
      if(reload==null || reload == true){
        loadData();
      }
    })
  }

  // END SAVE FUNCTIONALITY


6) add update Actions on ng-changes

///////////////////////////////
  // UPDATE ACTION ON RECORD //
  ///////////////////////////////

  $scope.updateAction = function(actionObject){
    $scope.unsavedChanges =true;
    if(['edit', 'delete', 'add'].indexOf(arguments[1])!=-1){
      if(!(actionObject.action=='add' && arguments[1]=='edit')){
        actionObject.action=arguments[1];
      }
    }else if(actionObject.action!='add'){
      actionObject.action='edit';
    }
  }
  // END UPDATE ACTION ON RECORD


   ng-change="updateAction(row)"



**** CHECK BASIC SAVING (NOT ADDING OR DELETING) *****


7) handle Adding and deleting records in collections



///////////////////////////////////
  // ADDING RECORDS TO COLLECTIONS //
  ///////////////////////////////////


    $scope.addRecord = function(property, array){
      $scope.unsavedChanges=true;
       switch (property){
        case 'action':
          array.push({
            action: 'add',
            actionDate: new Date(),
            actionPurpose: null,
            actionTypeId: null,
            agreementHistoryActionId: null,
            amendmentNumber: null,
            assistanceTypeId: null,
            currentLoanCeilingAmount: null,
            loanDocuments: [],
            loanNumber: null,
            notes: null,
            otherDocuments: [],
            projectId: $scope.projectId
          });
          break;
        case 'document':
          array.push({
            action: 'add',
            addedByStaffId: null, //should be generated by name of logged in user
            dateAdded: new Date(),
            documentId: null,
            documentType: null,
            referenceName: null 
          });
          break;
        default:
          console.error("Could not add record for " + property);
       } 
    }

    // END ADD RECORD

 ng-click="addRecord('funding source', sources);"




/////////////////////////////////////////////////////
  // DELETE RECORD FROM COLLECTION OF ACTION OBJECTS //
  /////////////////////////////////////////////////////
  $scope.deleteRecord = function(array, index){
    if (array[index].hasOwnProperty('action')){
      $scope.updateAction(array[index], 'delete');
    }else{
      array.splice(index, 1);
    }
  }
  // END DELETE RECORD

  ****Don't forget to update action on parent records with deleting child records:

    ng-click="deleteRecord(sources, $index); updateAction(parent.of.sources);"

  **** and on your ng-repeat, have ng-if="row.action!='delete'"


8) Do any totals updating

  ///////////////////
  // UPDATE TOTALS //
  ///////////////////

  $scope.updateTotals = function(){
   var totals = {
    plannedAmountToFund: 0,
    cost: 0,
    amountToObligate: 0
  };

  angular.forEach($scope.sources, function(source, index){
    if(source.action!='delete'){
      for(var key in totals){
        if(source.hasOwnProperty(key)){
          totals[key] += source[key];
        }
      }
    }
  });

  $scope.totals = totals;

}


  // END UPDATE TOTALS



  **** don't forget to do totalling on ng-change and on initial load


  9) Cofirm save on exit

  //////////////////////////
  // CONFIRM SAVE ON EXIT //
  //////////////////////////

  $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams){
    if(!$scope.exitConfirmed && $scope.unsavedChanges){
      event.preventDefault();
      modals.yesNoCancel({
        message:"Save changes?",
        yes: function(){
          $scope.save(false);
          $scope.exitConfirmed =true;
          $state.go(toState, toParams);
        },
        no: function(){
          $scope.exitConfirmed =true;
          $state.go(toState, toParams);
        },
        cancel: function(){}
      })
    }
  });
  // END CONFIRM SAVE ON EXIT


